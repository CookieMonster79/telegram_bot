import random
from datetime import datetime

import psycopg2
import requests
import telebot
from apscheduler.schedulers.background import BackgroundScheduler
from tabulate import tabulate
from telebot import types
from telebot.types import KeyboardButton


import config

bot = telebot.TeleBot(config.TOKEN)

# –°–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–º—É –¥–æ—Å—Ç—É–ø–µ–Ω –±–æ—Ç
list_user = ['moskva_max', 'Sasha6Popova']


@bot.message_handler(commands=['start'])
def start_command(message):
    """
    –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    :return: –í–æ–∑–≤—Ä–∞—Ç –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    """
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('üéá –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ')
    item2 = types.KeyboardButton('üîÆ –£–∑–Ω–∞–µ–º –ø–æ–≥–æ–¥—É')
    item3 = types.KeyboardButton('üç© ITSM365')
    item4 = types.KeyboardButton('üî± –î—Ä—É–≥–æ–µ')

    markup.add(item1, item2, item3, item4)

    def approvDate():
        text = '–ü—É—Å—Ç–æ'
        con = psycopg2.connect(
            database=config.PG_DATABASE,
            user=config.PG_USER,
            password=config.PG_PASSWORD,
            host=config.PG_HOST,
            port=config.PG_PORT
        )
        cur = con.cursor()
        cur.execute('SELECT text, year, dm from public."Birthday"')
        rows = cur.fetchall()
        curDate = datetime.now().strftime("%d-%m")
        curYear = datetime.now().strftime("%Y")
        for row in rows:
            if (row[2] == curDate):
                text = '–°–µ–≥–æ–¥–Ω—è ' + row[0] + ', ' + '—Ä–æ–¥–∏–ª—Å—è(-–ª–∞—Å—å) ' + row[1] + ', –ª–µ—Ç ' + (int(curYear) - int(row[1]))
            else:
                text = '–°–µ–≥–æ–¥–Ω—è, –Ω–µ—Ç –Ω–∏ —É –∫–æ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è!'

        con.close()
        return text

    scheduler.add_job(bot.send_message, trigger='cron', hour='10', minute='00',
                      args=[message.chat.id, approvDate()], id=f'–ó–∞–¥–∞—á–∞ {text}')
    scheduler.start()

    bot.send_message(message.chat.id,
                     '–ü—Ä–∏–≤–µ—Ç!.\n' +
                     '–£–º–µ—é –≤—Å—è–∫–æ–µ.\n',
                     reply_markup=markup
                     )


def toFixed(numObj, digits=0):
    """
    –£–¥–∞–ª—è–µ—Ç —Å–∏–º–≤–æ–ª—ã –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    :param numObj: –≤—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    :param digits: —Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π, –µ—Å–ª–∏ 0 —Ç–æ –∑–∞–ø—è—Ç–∞—è —É–±–∏—Ä–∞–µ—Ç—Å—è
    :return:
    """
    return f"{numObj:.{digits}f}"


scheduler = BackgroundScheduler({'apscheduler.timezone': 'Europe/Moscow'})


@bot.message_handler(content_types=['text'])
def bot_message(message):
    e = 0
    if message.chat.username in list_user:
        if message.chat.type == 'private':

            if message.text == 'üéá –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ':
                bot.send_message(message.chat.id, '–í–∞—à–µ —á–∏—Å–ª–æ: ' + str(random.randint(0, 100)))
            elif message.text == 'üîÆ –£–∑–Ω–∞–µ–º –ø–æ–≥–æ–¥—É':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item1 = types.KeyboardButton('üè§ –ú–æ—Å–∫–≤–∞')
                item2 = types.KeyboardButton('üö£ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥')
                back = types.KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')
                markup.add(item1, item2, back)

                bot.send_message(message.chat.id, 'üîÆ –£–∑–Ω–∞–µ–º –ø–æ–≥–æ–¥—É', reply_markup=markup)

            elif message.text == 'üç© ITSM365':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item1 = types.KeyboardButton('üçÄ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã')
                item2 = types.KeyboardButton('üì¶ –ó–∞—è–≤–æ–∫ —Å–µ–≥–æ–¥–Ω—è')
                item3 = types.KeyboardButton('üì¶ –°—Ç–∞—Ç. –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º')
                item4 = types.KeyboardButton('üì¶ –í–æ–π—Ç–∏ –ø–æ–¥ ...')
                item5 = types.KeyboardButton('üö™ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—è–≤–∫–∏')
                item6 = types.KeyboardButton('üì¶ –ï—â—ë –æ–¥–Ω–æ 4')
                back = types.KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')
                markup.add(item1, item2, item3, item4, item5, item6, back)

                bot.send_message(message.chat.id, 'üç© ITSM365', reply_markup=markup)

            elif message.text == 'üçÄ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã':
                try:
                    r = requests.get(f"{config.PATH}sd/services/rest/check-status")
                    data = r.text
                    time = toFixed(r.elapsed.total_seconds(), 2)

                    bot.send_message(message.chat.id,
                                     f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {data}\n" +
                                     f"–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {time} —Å–µ–∫")

                except:
                    bot.send_message(chat_id=message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É :(')

            elif message.text == 'üì¶ –ó–∞—è–≤–æ–∫ —Å–µ–≥–æ–¥–Ω—è':
                try:
                    url = f"{config.PATH}sd/services/rest/exec?accessKey={config.ACCESSKEY}"

                    files = [
                        ('script', ('countCall.groovy', open('Groovy Script/countCall.groovy', 'rb'),
                                    'application/octet-stream'))
                    ]
                    headers = {
                        'Authorization': 'Basic UnVkb21hbkRTQE1PUy5QT0xVUy5HTEQ6MTIz',
                        'Cookie': 'JSESSIONID=F6142A7BA1F133CF7C2AFC77DB5D8BA6'
                    }

                    response = requests.request("POST", url, headers=headers, data={}, files=files)

                    data = response.text

                    bot.send_message(message.chat.id,
                                     f"{data}")
                except:
                    bot.send_message(chat_id=message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É :(')

            elif message.text == 'üì¶ –°—Ç–∞—Ç. –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º':
                '''
                !!!!!!!!–ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º –ø–æ–¥ –≤—ã–≤–æ–¥ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω'''
                try:
                    url = f"{config.PATH}sd/services/rest/exec?accessKey={config.ACCESSKEY}"

                    files = [
                        ('script', ('countCall.groovy', open('Groovy Script/tableStatisticForClient.groovy', 'rb'),
                                    'application/octet-stream'))
                    ]
                    headers = {
                        'Authorization': 'Basic UnVkb21hbkRTQE1PUy5QT0xVUy5HTEQ6MTIz',
                        'Cookie': 'JSESSIONID=F6142A7BA1F133CF7C2AFC77DB5D8BA6'
                    }

                    response = requests.request("POST", url, headers=headers, data={}, files=files)

                    data = response.text

                    data = data.replace("]", "")
                    data = data.replace("[", "")
                    data = data.replace(" ", "")
                    result = data.split(",")

                    def split_list(alist, wanted_parts=1):
                        length = len(alist)
                        return [alist[i * length // wanted_parts: (i + 1) * length // wanted_parts]
                                for i in range(wanted_parts)]

                    lists = split_list(result, wanted_parts=9)
                    lenght = len(lists)

                    table = {}

                    for i in range(lenght):
                        pool = lists[i]
                        table[i] = pool

                    headers = ["–ù–∞–∑–≤–∞–Ω–∏–µ", "–ó–∞—è–≤–∫–∏", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏", "–†–µ–≥–ª. —Ä–∞–±–æ—Ç—ã"]

                    text_mess = tabulate(
                        [table[0]  # , table[1], table[2], table[3], table[4], table[5], table[6], table[7], table[8]
                         ],
                        headers)

                    bot.send_message(message.chat.id,
                                     text_mess, parse_mode="HTML")
                except:
                    bot.send_message(chat_id=message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É :(')

            elif message.text == 'üì¶ –í–æ–π—Ç–∏ –ø–æ–¥ ...':
                try:
                    markup = types.ForceReply(selective=False)
                    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é, —Ç–∏–ø–∞ –ò–≤–∞–Ω–æ–≤", reply_markup=markup)

                    @bot.message_handler(content_types=['text'])
                    def message_input_step(message_user):
                        global user_text
                        user_text = message_user.text

                        if user_text != '':
                            with open('Groovy Script/loginForEmpl.groovy', 'r', encoding="utf-8") as f:
                                old_data = f.read()

                            new_data = old_data.replace('–ò–≤–∞–Ω–æ–≤', user_text)

                            with open('Groovy Script/loginForEmpl.groovy', 'w', encoding="utf-8") as f:
                                f.write(new_data)

                            url_ACCESSKEY = f"{config.PATH}sd/services/rest/exec?accessKey={config.ACCESSKEY}"

                            files = [
                                ('script', ('loginForEmpl.groovy', open('Groovy Script/loginForEmpl.groovy', 'rb'),
                                            'application/octet-stream'))
                            ]
                            headers = {
                                'Authorization': 'Basic UnVkb21hbkRTQE1PUy5QT0xVUy5HTEQ6MTIz',
                                'Cookie': 'JSESSIONID=F6142A7BA1F133CF7C2AFC77DB5D8BA6'
                            }

                            response = requests.request("POST", url_ACCESSKEY, headers=headers, data={}, files=files)

                            data = response.text

                            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                            item1 = types.KeyboardButton('üçÄ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã')
                            item2 = types.KeyboardButton('üì¶ –ó–∞—è–≤–æ–∫ —Å–µ–≥–æ–¥–Ω—è')
                            item3 = types.KeyboardButton('üì¶ –°—Ç–∞—Ç. –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º')
                            item4 = types.KeyboardButton('üì¶ –í–æ–π—Ç–∏ –ø–æ–¥ ...')
                            item5 = types.KeyboardButton('üì¶ –ï—â—ë –æ–¥–Ω–æ 3')
                            item6 = types.KeyboardButton('üì¶ –ï—â—ë –æ–¥–Ω–æ 4')
                            back: KeyboardButton = types.KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')
                            markup.add(item1, item2, item3, item4, item5, item6, back)

                            bot.send_message(message.chat.id, text=data, parse_mode="HTML", reply_markup=markup)

                            new_data2 = new_data.replace(user_text, '–ò–≤–∞–Ω–æ–≤')
                            with open('Groovy Script/loginForEmpl.groovy', 'w', encoding="utf-8") as f:
                                f.write(new_data2)

                    bot.register_next_step_handler(message,
                                                   message_input_step)
                    # –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ message_input_step
                except:
                    bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É :(')

            elif message.text == 'üö™ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—è–≤–∫–∏':
                bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É :(')
                # try:

            # except:
            #    bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É :(')

            elif message.text == 'üî± –î—Ä—É–≥–æ–µ':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item1 = types.KeyboardButton('üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
                item3 = types.KeyboardButton('üóø –°—Ç–∏–∫–µ—Ä')
                back = types.KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')
                markup.add(item1, item3, back)

                bot.send_message(message.chat.id, 'üî± –î—Ä—É–≥–æ–µ', reply_markup=markup)

            elif message.text == '‚óÄ –ù–∞–∑–∞–¥':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item1 = types.KeyboardButton('üéá –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ')
                item2 = types.KeyboardButton('üîÆ –£–∑–Ω–∞–µ–º –ø–æ–≥–æ–¥—É')
                item3 = types.KeyboardButton('üç© ITSM365')
                item4 = types.KeyboardButton('üî± –î—Ä—É–≥–æ–µ')

                markup.add(item1, item2, item3, item4)

                bot.send_message(message.chat.id,
                                 '‚óÄ –ù–∞–∑–∞–¥',
                                 reply_markup=markup
                                 )

            elif message.text == 'üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π':
                try:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    item2 = types.KeyboardButton('üìç –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞')
                    item3 = types.KeyboardButton('üóíÔ∏è –í—Å–µ –¥–∞—Ç—ã')
                    back = types.KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')
                    markup.add(item2, item3, back)

                    bot.send_message(message.chat.id, 'üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π', reply_markup=markup)

                except:
                    bot.send_message(chat_id=message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É :(')

            elif message.text == 'üóíÔ∏è –í—Å–µ –¥–∞—Ç—ã':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item2 = types.KeyboardButton('üìç –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞')
                item3 = types.KeyboardButton('üóíÔ∏è –í—Å–µ –¥–∞—Ç—ã')
                back = types.KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')
                markup.add(item2, item3, back)

                try:
                    con = psycopg2.connect(
                        database=config.PG_DATABASE,
                        user=config.PG_USER,
                        password=config.PG_PASSWORD,
                        host=config.PG_HOST,
                        port=config.PG_PORT
                    )

                    cur = con.cursor()
                    cur.execute('SELECT * FROM public."Birthday"')
                    rows = cur.fetchall()

                    for row in rows:
                        bot.send_message(message.chat.id, parse_mode="HTML", text=
                        "–û–ø–∏—Å–∞–Ω–∏–µ: " + row[0] + "<pre>\n</pre> –ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è: " +
                        row[1] + "<pre>\n</pre> –î–µ–Ω—å –∏ –º–µ—Å—è—Ü: " + row[2])

                    con.close()

                except:
                    bot.send_message(chat_id=message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É :(', reply_markup=markup)

            elif message.text == 'üóø –°—Ç–∏–∫–µ—Ä':
                try:
                    i = random.randint(1, 100)

                    con = psycopg2.connect(
                        database=config.PG_DATABASE,
                        user=config.PG_USER,
                        password=config.PG_PASSWORD,
                        host=config.PG_HOST,
                        port=config.PG_PORT
                    )

                    cur = con.cursor()

                    cur.execute('SELECT * FROM public."Stickers" WHERE id = ' + str(i))

                    rows = cur.fetchall()

                    for row in rows:
                        bot.send_sticker(message.chat.id, row[1])

                    con.close()

                except:
                    bot.send_message(chat_id=message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É :(')

            elif message.text == 'üè§ –ú–æ—Å–∫–≤–∞':
                try:
                    r = requests.get(
                        f"http://api.openweathermap.org/data/2.5/weather?q=moscow&appid={config.WEATHER_TOKEN}&units=metric"
                    )
                    data = r.json()

                    cur_weat = data["main"]["temp"]
                    humidity = data["main"]["humidity"]
                    pressure = data["main"]["pressure"]
                    wind = data["wind"]["speed"]

                    bot.send_message(message.chat.id,
                                     f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weat}C¬∞\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                                     f"–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Ç.\n–í–µ—Ç–µ—Ä: {wind} –º/—Å–µ–∫\n")


                except:
                    bot.send_message(chat_id=message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É :(')

            elif message.text == 'üö£ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥':
                try:
                    r = requests.get(
                        f"http://api.openweathermap.org/data/2.5/weather?q=Saint%20Petersburg&appid={config.WEATHER_TOKEN}&units=metric"
                    )
                    data = r.json()

                    cur_weat = data["main"]["temp"]
                    humidity = data["main"]["humidity"]
                    pressure = data["main"]["pressure"]
                    wind = data["wind"]["speed"]

                    bot.send_message(message.chat.id,
                                     f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weat}C¬∞\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                                     f"–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Ç.\n–í–µ—Ç–µ—Ä: {wind} –º/—Å–µ–∫\n")


                except:
                    bot.send_message(chat_id=message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É :(')

    else:
        bot.send_message(message.chat.id, message.text)


bot.polling(none_stop=True)
