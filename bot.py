import json
import random
import time
from datetime import datetime

import prettytable as pt
import psycopg2
import requests
from multiprocessing.context import Process
import schedule
import telebot
from telebot import types
from telebot.types import KeyboardButton

import config

bot = telebot.TeleBot(config.TOKEN)
user_id = 240170832 #–î–∞–Ω–Ω—ã–µ –ò–î –º–æ–π, –Ω—É–∂–Ω–æ –ø–æ—É–¥–º–∞—Ç—å –Ω–∞–¥ —Ç–µ–º —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥ message id

# –°–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–º—É –¥–æ—Å—Ç—É–ø–µ–Ω –±–æ—Ç
list_user = ['moskva_max', 'Sa_Mosk']


def approvedDate():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ —Å–µ–≥–æ–¥–Ω—è —É –∫–æ–≥–æ-–Ω–∏–±—É–¥—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ
    :return: –¢–µ–∫—Å—Ç
    """
    text = '–ü—É—Å—Ç–æ'
    con = psycopg2.connect(
        database=config.PG_DATABASE,
        user=config.PG_USER,
        password=config.PG_PASSWORD,
        host=config.PG_HOST,
        port=config.PG_PORT
    )
    cur = con.cursor()
    cur.execute('SELECT text, year, dm from public."Birthday"')
    rows = cur.fetchall()
    curDate = datetime.now().strftime("%d-%m")
    curYear = datetime.now().strftime("%Y")
    # for row in rows:
    #     if row[2] == curDate:
    #     text = '–°–µ–≥–æ–¥–Ω—è ' + row[0] + ', ' + '—Ä–æ–¥–∏–ª—Å—è(-–ª–∞—Å—å) ' + row[1] + ', –ª–µ—Ç ' + (int(curYear) - int(row[1]))
    #  else:
    #       text = '–°–µ–≥–æ–¥–Ω—è, –Ω–µ—Ç –Ω–∏ —É –∫–æ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è!'

    con.close()
    return text


def send_message1():
    bot.send_message(chat_id=user_id, text='–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç. –í—Å—ë –Ω–æ—Ä–º–∞–ª—å–Ω–æ!')


schedule.every().day.at('12:00').do(send_message1) #–¢–µ—Å—Ç–æ–≤—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è


@bot.message_handler(commands=['start'])
def start_command(message):
    """
    –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    :return: –í–æ–∑–≤—Ä–∞—Ç –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    """
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('üéá –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ')
    item2 = types.KeyboardButton('üîÆ –£–∑–Ω–∞–µ–º –ø–æ–≥–æ–¥—É')
    # item3 = types.KeyboardButton('üç© ITSM365')
    item4 = types.KeyboardButton('üå¨Ô∏è –ê–ª–∏—Å–∞')
    item5 = types.KeyboardButton('üî± –î—Ä—É–≥–æ–µ')

    # markup.add(item1, item2, item3, item4, item5)
    markup.row(item1, item2)
    markup.row(item4, item5)

    bot.send_message(message.chat.id,
                     '–ü—Ä–∏–≤–µ—Ç!.\n' +
                     '–£–º–µ—é –≤—Å—è–∫–æ–µ.\n',
                     reply_markup=markup
                     )


def state_dev(id_dev):
    '''–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –µ—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è True, —Ç–æ –≤–∫–ª—é—á–µ–Ω–æ'''
    url = f'https://api.iot.yandex.net/v1.0/devices/{id_dev}'

    payload = {}
    headers = {
        'Authorization': f'Bearer {config.TOKEN_YA}'
    }

    response = requests.request("GET", url, headers=headers, data=payload)

    a = json.loads(response.text.replace("'", '"'))
    item = a.get('type')

    if item == 'devices.types.light': # –Ω–∞–ø–∏—Å–∞–Ω–æ —É—Å–ª–æ–≤–∏–µ –¥–ª—è –ª—é—Å—Ç—Ä—ã —Å–ª–µ–¥—É–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≥—Ä—É–ø–ø—É –≤ –±—É–¥—É—â–µ–º
        return a.get('capabilities')[1].get('state').get('value')
    else:
        return a.get('capabilities')[0].get('state').get('value')


def run_scen(id_scen):
    '''–§—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª–Ω—è–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ id'''
    url = f'https://api.iot.yandex.net/v1.0/scenarios/{id_scen}/actions'

    payload = {}

    headers = {
        'Authorization': f'Bearer {config.TOKEN_YA}'
    }
    response = requests.request("POST", url, headers=headers, data=payload)

    return response.text


def toFixed(numObj, digits=0):
    """
    –£–¥–∞–ª—è–µ—Ç —Å–∏–º–≤–æ–ª—ã –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    :param numObj: –≤—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    :param digits: —Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π, –µ—Å–ª–∏ 0 —Ç–æ –∑–∞–ø—è—Ç–∞—è —É–±–∏—Ä–∞–µ—Ç—Å—è
    :return:
    """
    return f"{numObj:.{digits}f}"


@bot.message_handler(content_types=['text'])
def bot_message(message):
    if message.chat.username in list_user:
        if message.chat.type == 'private':

            if message.text == 'üéá –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ':
                bot.send_message(message.chat.id, '–í–∞—à–µ —á–∏—Å–ª–æ: ' + str(random.randint(0, 100)))

            elif message.text == 'üç© ITSM365':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item1 = types.KeyboardButton('üçÄ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã')
                item2 = types.KeyboardButton('üì¶ –ó–∞—è–≤–æ–∫ —Å–µ–≥–æ–¥–Ω—è')
                item3 = types.KeyboardButton('üì¶ –°—Ç–∞—Ç. –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º')
                item4 = types.KeyboardButton('üì¶ –í–æ–π—Ç–∏ –ø–æ–¥ ...')
                item5 = types.KeyboardButton('üö™ –ó–∞—è–≤–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
                item6 = types.KeyboardButton('üì¶ –ï—â—ë –æ–¥–Ω–æ 4')
                back = types.KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')
                markup.add(item1, item2, item3, item4, item5, item6, back)

                bot.send_message(message.chat.id, 'üç© ITSM365', reply_markup=markup)

            elif message.text == 'üçÄ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã':
                try:
                    r = requests.get(f"{config.PATH}sd/services/rest/check-status")
                    data = r.text
                    time = toFixed(r.elapsed.total_seconds(), 2)

                    bot.send_message(message.chat.id,
                                     f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {data}\n" +
                                     f"–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {time} —Å–µ–∫")

                except:
                    bot.send_message(chat_id=message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É :(')

            elif message.text == 'üì¶ –ó–∞—è–≤–æ–∫ —Å–µ–≥–æ–¥–Ω—è':
                try:
                    url = f"{config.PATH}sd/services/rest/exec?accessKey={config.ACCESSKEY}"

                    files = [
                        ('script', ('countCall.groovy', open('Groovy Script/countCall.groovy', 'rb'),
                                    'application/octet-stream'))
                    ]

                    response = requests.request("POST", url, headers=config.headers, data={}, files=files)

                    data = response.text

                    bot.send_message(message.chat.id,
                                     f"{data}")
                except:
                    bot.send_message(chat_id=message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É :(')

            elif message.text == 'üì¶ –°—Ç–∞—Ç. –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º':
                try:
                    url = f"{config.PATH}sd/services/rest/exec?accessKey={config.ACCESSKEY}"

                    files = [
                        ('script', ('countCall.groovy', open('Groovy Script/tableStatisticForClient.groovy', 'rb'),
                                    'application/octet-stream'))
                    ]

                    response = requests.request("POST", url, headers=config.headers, data={}, files=files)

                    list = []
                    data = response.text
                    data = data.replace("]", "", 1)
                    data = data.replace("[", "", 1)

                    for i in range(0, 1):
                        list.extend(data.split(', '))

                    table = pt.PrettyTable(["–ù–∞–∑–≤–∞–Ω–∏–µ", "–ó–∞—è–≤–∫–∏", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏", "–†–µ–≥–ª. —Ä–∞–±–æ—Ç—ã"])
                    table.align['–ù–∞–∑–≤–∞–Ω–∏–µ'] = 'l'
                    table.align['–ó–∞—è–≤–∫–∏'] = 'r'
                    table.align['–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏'] = 'r'
                    table.align['–†–µ–≥–ª. —Ä–∞–±–æ—Ç—ã'] = 'r'

                    '''
                    –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥—è—â–∏–π —Ç–∞–±–ª–∏—Ü—ã –ø–æ–¥ —Ü–∏–∫–ª, –ø—Ä–æ–±–æ–≤–∞–ª –Ω–∏–∂–µ –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
                    data = []
                    for j in range(0, len(list), 4):
                        a1 = (f'{list[j]}', list[j+1], list[j+2], list[j+3])
                        data.append(a1)
                    '''

                    data = [
                        (f'{list[0]}', int(list[1]), int(list[2]), int(list[3])),
                        (f'{list[4]}', int(list[5]), int(list[6]), int(list[7])),
                        (f'{list[8]}', int(list[9]), int(list[10]), int(list[11])),
                        (f'{list[12]}', int(list[13]), int(list[14]), int(list[15])),
                        (f'{list[16]}', int(list[17]), int(list[18]), int(list[19])),
                        (f'{list[20]}', int(list[21]), int(list[22]), int(list[23])),
                        (f'{list[24]}', int(list[25]), int(list[26]), int(list[27])),
                        (f'{list[28]}', int(list[29]), int(list[30]), int(list[31])),
                        (f'{list[32]}', int(list[33]), int(list[34]), int(list[35])),
                        (f'{list[36]}', int(list[37]), int(list[38]), int(list[39])),
                        (f'{list[40]}', int(list[41]), int(list[42]), int(list[43])),
                        (f'{list[44]}', int(list[45]), int(list[46]), int(list[47])),
                        (f'{list[48]}', int(list[49]), int(list[50]), int(list[51])),
                    ]

                    for name, call, emp, regalement in data:
                        table.add_row([name, f'{call:.0f}', f'{emp:.0f}', f'{regalement:.0f}'])

                    bot.send_message(message.chat.id,
                                     f'<pre>{table}</pre>', parse_mode="HTML")
                except:
                    bot.send_message(chat_id=message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É :(')

            elif message.text == 'üì¶ –í–æ–π—Ç–∏ –ø–æ–¥ ...':
                try:
                    markup = types.ForceReply(selective=False)
                    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é, —Ç–∏–ø–∞ –ò–≤–∞–Ω–æ–≤", reply_markup=markup)

                    @bot.message_handler(content_types=['text'])
                    def message_input_step(message_user):
                        global user_text
                        user_text = message_user.text

                        if user_text != '':
                            with open('Groovy Script/loginForEmpl.groovy', 'r', encoding="utf-8") as f:
                                old_data = f.read()

                            new_data = old_data.replace('–ò–≤–∞–Ω–æ–≤', user_text)

                            with open('Groovy Script/loginForEmpl.groovy', 'w', encoding="utf-8") as f:
                                f.write(new_data)

                            url_ACCESSKEY = f"{config.PATH}sd/services/rest/exec?accessKey={config.ACCESSKEY}"

                            files = [
                                ('script', ('loginForEmpl.groovy', open('Groovy Script/loginForEmpl.groovy', 'rb'),
                                            'application/octet-stream'))
                            ]

                            responseNSD = requests.request("POST", url_ACCESSKEY, headers=config.headers, data={},
                                                           files=files)

                            markupKeybord = types.ReplyKeyboardMarkup(resize_keyboard=True)
                            item1Button = types.KeyboardButton('üçÄ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã')
                            item2Button = types.KeyboardButton('üì¶ –ó–∞—è–≤–æ–∫ —Å–µ–≥–æ–¥–Ω—è')
                            item3Button = types.KeyboardButton('üì¶ –°—Ç–∞—Ç. –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º')
                            item4Button = types.KeyboardButton('üì¶ –í–æ–π—Ç–∏ –ø–æ–¥ ...')
                            item5Button = types.KeyboardButton('üö™ –ó–∞—è–≤–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
                            item6Button = types.KeyboardButton('üì¶ –ï—â—ë –æ–¥–Ω–æ 4')
                            backButton: KeyboardButton = types.KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')
                            markupKeybord.add(item1Button, item2Button, item3Button, item4Button, item5Button,
                                              item6Button, backButton)

                            bot.send_message(message.chat.id, text=responseNSD.text, parse_mode="HTML",
                                             reply_markup=markupKeybord)

                            # –ú–µ–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                            new_data2 = new_data.replace(user_text, '–ò–≤–∞–Ω–æ–≤')
                            with open('Groovy Script/loginForEmpl.groovy', 'w', encoding="utf-8") as f:
                                f.write(new_data2)

                    bot.register_next_step_handler(message, message_input_step)
                    # –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ message_input_step
                except:
                    bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É :(')

            elif message.text == 'üö™ –ó–∞—è–≤–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞':
                try:
                    markup = types.ForceReply(selective=False)
                    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é, —Ç–∏–ø–∞ –ü–µ—Ç—Ä–æ–≤", reply_markup=markup)

                    @bot.message_handler(content_types=['text'])
                    def message_input_step(message_user):
                        global user_text
                        user_text = message_user.text

                        if user_text != '':
                            with open('Groovy Script/SClistEmpl.groovy', 'r', encoding="utf-8") as f:
                                old_data = f.read()

                            new_data = old_data.replace('–ò–≤–∞–Ω–æ–≤', user_text)

                            with open('Groovy Script/SClistEmpl.groovy', 'w', encoding="utf-8") as f:
                                f.write(new_data)

                            url_ACCESSKEY = f"{config.PATH}sd/services/rest/exec?accessKey={config.ACCESSKEY}"

                            files = [
                                ('script', ('SClistEmpl.groovy', open('Groovy Script/SClistEmpl.groovy', 'rb'),
                                            'application/octet-stream'))
                            ]

                            responseNSD = requests.request("POST", url_ACCESSKEY, headers=config.headers, data={},
                                                           files=files)

                            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –§–∞–º–∏–ª–∏—é –≤ —Ñ–∞–π–ª–µ, –∫–∞–∫ –±—ã–ª–æ
                            new_data2 = new_data.replace(user_text, '–ò–≤–∞–Ω–æ–≤')
                            with open('Groovy Script/SClistEmpl.groovy', 'w', encoding="utf-8") as f:
                                f.write(new_data2)

                            dataResponse = responseNSD.text.replace("[", "", 1)
                            dataResponse = dataResponse.replace("]", "", 1)

                            markupKeybord = types.ReplyKeyboardMarkup(resize_keyboard=True)
                            item1Button = types.KeyboardButton('üçÄ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã')
                            item2Button = types.KeyboardButton('üì¶ –ó–∞—è–≤–æ–∫ —Å–µ–≥–æ–¥–Ω—è')
                            item3Button = types.KeyboardButton('üì¶ –°—Ç–∞—Ç. –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º')
                            item4Button = types.KeyboardButton('üì¶ –í–æ–π—Ç–∏ –ø–æ–¥ ...')
                            item5Button = types.KeyboardButton('üö™ –ó–∞—è–≤–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
                            item6Button = types.KeyboardButton('üì¶ –ï—â—ë –æ–¥–Ω–æ 4')
                            backButton: KeyboardButton = types.KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')

                            markupKeybord.add(item1Button, item2Button, item3Button, item4Button, item5Button,
                                              item6Button, backButton)

                            if dataResponse != '':
                                list_empl = dataResponse.split('=')

                                for k in range(0, len(list_empl)):
                                    list_empl[k] = list_empl[k].replace('{', '')
                                    list_empl[k] = list_empl[k].replace('}', '')
                                    list_empl[k] = list_empl[k].replace('[', '')
                                    list_empl[k] = list_empl[k].replace(']', '')

                                list_call_title = list_empl[2].split(',')
                                list_call_UUID = list_empl[3].split(',')
                                if list_call_title[-1] == ' UUID':
                                    list_call_title = list_call_title[0:-1]
                                elif list_call_UUID[-1].isalpha():
                                    list_call_UUID = list_call_UUID[0:-1]

                                # –§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                                InlineKeyboardMarkup = types.InlineKeyboardMarkup()

                                if list_call_title[0] != '':
                                    len_call_final = len(list_call_title) % 5
                                    len_call_base = len(list_call_title) - len_call_final
                                    # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –∑–∞—è–≤–æ–∫ –∫—Ä–∞—Ç–Ω–æ–µ 5 (–µ—Å–ª–∏ 10, —Ç–æ 2 —Ä–∞–∑–∞)
                                    for j in range(0, len_call_base - 1, 5):
                                        if (len(list_call_title) - j) > 5:
                                            button1 = types.InlineKeyboardButton(
                                                url=config.PATH + 'sd/operator/#uuid:' +
                                                    list_call_UUID[j], text=list_call_title[j])
                                            button2 = types.InlineKeyboardButton(
                                                url=config.PATH + 'sd/operator/#uuid:' +
                                                    list_call_UUID[j + 1], text=list_call_title[j + 1])
                                            button3 = types.InlineKeyboardButton(
                                                url=config.PATH + 'sd/operator/#uuid:' +
                                                    list_call_UUID[j + 2], text=list_call_title[j + 2])
                                            button4 = types.InlineKeyboardButton(
                                                url=config.PATH + 'sd/operator/#uuid:' +
                                                    list_call_UUID[j + 3], text=list_call_title[j + 3])
                                            button5 = types.InlineKeyboardButton(
                                                url=config.PATH + 'sd/operator/#uuid:' +
                                                    list_call_UUID[j + 4], text=list_call_title[j + 4])
                                            InlineKeyboardMarkup.row(button1, button2, button3, button4, button5)
                                    # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—Å—Ç–∞—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
                                    if len_call_final != 0:
                                        for l in range(0, 1):

                                            if len_call_final == 1:
                                                button1 = types.InlineKeyboardButton(
                                                    url=config.PATH + 'sd/operator/#uuid:' +
                                                        list_call_UUID[len_call_base + l],
                                                    text=list_call_title[len_call_base + l])
                                                InlineKeyboardMarkup.row(button1)

                                            elif len_call_final == 2:
                                                button1 = types.InlineKeyboardButton(
                                                    url=config.PATH + 'sd/operator/#uuid:' +
                                                        list_call_UUID[len_call_base + l],
                                                    text=list_call_title[len_call_base + l])
                                                button2 = types.InlineKeyboardButton(
                                                    url=config.PATH + 'sd/operator/#uuid:' +
                                                        list_call_UUID[len_call_base + l + 1],
                                                    text=list_call_title[len_call_base + l + 1])
                                                InlineKeyboardMarkup.row(button1, button2)

                                            elif len_call_final == 3:
                                                button1 = types.InlineKeyboardButton(
                                                    url=config.PATH + 'sd/operator/#uuid:' +
                                                        list_call_UUID[len_call_base + l],
                                                    text=list_call_title[len_call_base + l])
                                                button2 = types.InlineKeyboardButton(
                                                    url=config.PATH + 'sd/operator/#uuid:' +
                                                        list_call_UUID[len_call_base + l + 1],
                                                    text=list_call_title[len_call_base + l + 1])
                                                button3 = types.InlineKeyboardButton(
                                                    url=config.PATH + 'sd/operator/#uuid:' +
                                                        list_call_UUID[len_call_base + l + 2],
                                                    text=list_call_title[len_call_base + l + 2])
                                                InlineKeyboardMarkup.row(button1, button2, button3)

                                            elif len_call_final == 4:
                                                button1 = types.InlineKeyboardButton(
                                                    url=config.PATH + 'sd/operator/#uuid:' +
                                                        list_call_UUID[len_call_base + l],
                                                    text=list_call_title[len_call_base + l])
                                                button2 = types.InlineKeyboardButton(
                                                    url=config.PATH + 'sd/operator/#uuid:' +
                                                        list_call_UUID[len_call_base + l + 1],
                                                    text=list_call_title[len_call_base + l + 1])
                                                button3 = types.InlineKeyboardButton(
                                                    url=config.PATH + 'sd/operator/#uuid:' +
                                                        list_call_UUID[len_call_base + l + 2],
                                                    text=list_call_title[len_call_base + l + 2])
                                                button4 = types.InlineKeyboardButton(
                                                    url=config.PATH + 'sd/operator/#uuid:' +
                                                        list_call_UUID[len_call_base + l + 3],
                                                    text=list_call_title[len_call_base + l + 3])
                                                InlineKeyboardMarkup.row(button1, button2, button3, button4)

                                bot.send_message(message.chat.id, text='–ó–∞—è–≤–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: ' + list_empl[0],
                                                 parse_mode="HTML",
                                                 reply_markup=InlineKeyboardMarkup)

                                bot.send_message(message.chat.id, text='–ó–∞–∫–æ–Ω—á–∏–ª –≤—ã–≤–æ–¥ –∑–∞—è–≤–æ–∫!', parse_mode="HTML",
                                                 reply_markup=markupKeybord)
                            else:
                                bot.send_message(message.chat.id, text='–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!', parse_mode="HTML",
                                                 reply_markup=markupKeybord)

                    bot.register_next_step_handler(message, message_input_step)
                    # –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ message_input_step
                except:
                    bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É :(')

            elif message.text == 'üì¶ –ï—â—ë –æ–¥–Ω–æ 4':
                try:
                    with open('Groovy Script/infoForCall.groovy', 'r', encoding="utf-8") as f:
                        old_data = f.read()

                    new_data = old_data.replace('1000', '5708')

                    with open('Groovy Script/infoForCall.groovy', 'w', encoding="utf-8") as f:
                        f.write(new_data)

                    url_ACCESSKEY = f"{config.PATH}sd/services/rest/exec?accessKey={config.ACCESSKEY}"

                    files = [
                        ('script', ('infoForCall.groovy', open('Groovy Script/infoForCall.groovy', 'rb'),
                                    'application/octet-stream'))
                    ]
                    headers = config.headers

                    responseNSD = requests.request("POST", url_ACCESSKEY, headers=headers, data={}, files=files)

                    dataResponse = responseNSD.text

                    bot.send_message(message.chat.id, text=dataResponse, parse_mode="HTML")

                    new_data2 = new_data.replace('5708', '1000')
                    with open('Groovy Script/infoForCall.groovy', 'w', encoding="utf-8") as f:
                        f.write(new_data2)
                except:
                    bot.send_message(chat_id=message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É :(')

            elif message.text == 'üî± –î—Ä—É–≥–æ–µ':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item1 = types.KeyboardButton('üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
                item2 = types.KeyboardButton('üóø –°—Ç–∏–∫–µ—Ä')
                back = types.KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')
                markup.add(item1, item2, back)

                bot.send_message(message.chat.id, 'üî± –î—Ä—É–≥–æ–µ', reply_markup=markup)

            elif message.text == 'üå¨Ô∏è –ê–ª–∏—Å–∞':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

                item1 = types.KeyboardButton(f'üî¶ –¢–æ—Ä—à–µ—Ä: üåï/üåë')
                item2 = types.KeyboardButton(f'üåÜ –ù–æ—á–Ω–∏–∫: üåï/üåë')
                item3 = types.KeyboardButton(f'üí° –õ—é—Å—Ç—Ä–∞: üåï/üåë')
                item4 = types.KeyboardButton(f'ü§ñ –ë–µ–ª—è—à–∏–∫: üåï/üåë')
                item5 = types.KeyboardButton(f'‚ùì–û—á–∏—Å—Ç–∏—Ç–µ–ª—å')
                item6 = types.KeyboardButton(f'‚ùì–¢–µ–ª–µ–≤–∏–∑–æ—Ä')
                item7 = types.KeyboardButton(f'üí´ –ß–∏–ª–ª–∏–º')
                item8 = types.KeyboardButton(f'üóª –Ø —É—à—ë–ª')

                back = types.KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')
                markup.row(item1, item2, item3)
                markup.row(item4, item5, item6)
                markup.row(item7, item8)
                markup.row(back)

                bot.send_message(message.chat.id, 'üå¨Ô∏è –ê–ª–∏—Å–∞', reply_markup=markup)

            elif message.text.__contains__('üî¶ –¢–æ—Ä—à–µ—Ä'):
                if state_dev(config.TORCH):
                    run_scen(config.ON_TORCH)
                    state_t = 'üî¶ –¢–æ—Ä—à–µ—Ä: üåë'
                else:
                    run_scen(config.OFF_TORCH)
                    state_t = 'üî¶ –¢–æ—Ä—à–µ—Ä: üåï'

                bot.send_message(message.chat.id, state_t)

            elif message.text.__contains__('ü§ñ –ë–µ–ª—è—à–∏–∫'):
                if state_dev(config.RVC):
                    run_scen(config.ON_RVC)
                    state_t = 'ü§ñ –ë–µ–ª—è—à–∏–∫: üåë'
                else:
                    run_scen(config.OFF_RVC)
                    state_t = 'ü§ñ –ë–µ–ª—è—à–∏–∫: üåï'

                bot.send_message(message.chat.id, state_t)

            elif message.text.__contains__('üåÜ –ù–æ—á–Ω–∏–∫'):
                if state_dev(config.NIGHTLIGHT):
                    run_scen(config.ON_NIGHTLIGHT)
                    state_t = 'üåÜ –ù–æ—á–Ω–∏–∫: üåë'
                else:
                    run_scen(config.OFF_NIGHTLIGHT)
                    state_t = 'üåÜ –ù–æ—á–Ω–∏–∫: üåï'

                bot.send_message(message.chat.id, state_t)

            elif message.text.__contains__('üí° –õ—é—Å—Ç—Ä–∞'):
                if state_dev(config.CHANDELIER):
                    run_scen(config.ON_CHANDELIER)
                    state_t = 'üí° –õ—é—Å—Ç—Ä–∞: üåë'
                else:
                    run_scen(config.OFF_CHANDELIER)
                    state_t = 'üí° –õ—é—Å—Ç—Ä–∞: üåï'

                bot.send_message(message.chat.id, state_t)

            elif message.text.__contains__('üí´ –ß–∏–ª–ª–∏–º'):
                try:
                    run_scen(config.–°HILL)
                    state = '–ï–µ–µ–µ –ß–∏–ª–ª–∏–º!!! –í—ã–∫–ª—é—á–∞–µ–º –ª—é—Å—Ç—Ä—É, –≤–∫–ª—é—á–∞–µ–º –Ω–æ—á–Ω–∏–∫!'

                    bot.send_message(message.chat.id, state)

                except:
                    bot.send_message(chat_id=message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É :(')

            elif message.text.__contains__('üóª –Ø —É—Ö–æ–∂—É'):
                try:
                    run_scen(config.IM_OUT)
                    state = '–í—ã–∫–ª—é—á–∞–µ–º –≤—Å—ë!'

                    bot.send_message(message.chat.id, state)

                except:
                    bot.send_message(chat_id=message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É :(')

            elif message.text == 'üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π':
                try:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    item2 = types.KeyboardButton('üìç –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞')
                    item3 = types.KeyboardButton('üóíÔ∏è –í—Å–µ –¥–∞—Ç—ã')
                    back = types.KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')
                    markup.add(item2, item3, back)

                    bot.send_message(message.chat.id, 'üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π', reply_markup=markup)

                except:
                    bot.send_message(chat_id=message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É :(')

            elif message.text == 'üìç –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞':
                try:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    item2 = types.KeyboardButton('üìç –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞')
                    item3 = types.KeyboardButton('üóíÔ∏è –í—Å–µ –¥–∞—Ç—ã')
                    back = types.KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')
                    markup.add(item2, item3, back)

                    # thread = Thread(target=run(message, markup))
                    # thread.start()

                except:
                    bot.send_message(chat_id=message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É :(')

            elif message.text == 'üóíÔ∏è –í—Å–µ –¥–∞—Ç—ã':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item1 = types.KeyboardButton('üìç –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞')
                item2 = types.KeyboardButton('üóíÔ∏è –í—Å–µ –¥–∞—Ç—ã')
                back = types.KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')
                markup.add(item1, item2, back)

                try:
                    con = psycopg2.connect(
                        database=config.PG_DATABASE,
                        user=config.PG_USER,
                        password=config.PG_PASSWORD,
                        host=config.PG_HOST,
                        port=config.PG_PORT
                    )

                    cur = con.cursor()
                    cur.execute('SELECT * FROM public."Birthday"')
                    rows = cur.fetchall()

                    for row in rows:
                        bot.send_message(message.chat.id, parse_mode="HTML",
                                         text=row[0] + "\n–î–∞—Ç–∞: " + row[2] + "-" +
                                              row[1])

                    con.close()

                except:
                    bot.send_message(chat_id=message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É :(', reply_markup=markup)

            elif message.text == 'üóø –°—Ç–∏–∫–µ—Ä':
                try:
                    i = random.randint(1, 100)

                    con = psycopg2.connect(
                        database=config.PG_DATABASE,
                        user=config.PG_USER,
                        password=config.PG_PASSWORD,
                        host=config.PG_HOST,
                        port=config.PG_PORT
                    )

                    cur = con.cursor()

                    cur.execute('SELECT * FROM public."Stickers" WHERE id = ' + str(i))

                    rows = cur.fetchall()

                    for row in rows:
                        bot.send_sticker(message.chat.id, row[1])

                    con.close()

                except:
                    bot.send_message(chat_id=message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É :(')

            elif message.text == 'üîÆ –£–∑–Ω–∞–µ–º –ø–æ–≥–æ–¥—É':
                '''–ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å –≥–æ—Ä–æ–¥–∞ –ø–æ–¥ Inline-–∫–Ω–æ–ø–∫–∏'''

                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item1 = types.KeyboardButton('üè§ –ú–æ—Å–∫–≤–∞')
                item2 = types.KeyboardButton('üö£ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥')
                back = types.KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')
                markup.add(item1, item2, back)

                bot.send_message(message.chat.id, 'üîÆ –£–∑–Ω–∞–µ–º –ø–æ–≥–æ–¥—É', reply_markup=markup)

            elif message.text == 'üè§ –ú–æ—Å–∫–≤–∞':
                try:
                    r = requests.get(
                        f"http://api.openweathermap.org/data/2.5/weather?q=moscow&appid="
                        f"{config.WEATHER_TOKEN}&units=metric"
                    )
                    data = r.json()

                    cur_weat = data["main"]["temp"]
                    humidity = data["main"]["humidity"]
                    pressure = data["main"]["pressure"]
                    wind = data["wind"]["speed"]

                    bot.send_message(message.chat.id,
                                     f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weat}C¬∞\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                                     f"–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Ç.\n–í–µ—Ç–µ—Ä: {wind} –º/—Å–µ–∫\n")


                except:
                    bot.send_message(chat_id=message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É :(')

            elif message.text == 'üö£ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥':
                try:
                    r = requests.get(
                        f"http://api.openweathermap.org/data/2.5/weather?q=Saint%20Petersburg&appid="
                        f"{config.WEATHER_TOKEN}&units=metric"
                    )
                    data = r.json()

                    cur_weat = data["main"]["temp"]
                    humidity = data["main"]["humidity"]
                    pressure = data["main"]["pressure"]
                    wind = data["wind"]["speed"]

                    bot.send_message(message.chat.id,
                                     f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weat}C¬∞\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                                     f"–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Ç.\n–í–µ—Ç–µ—Ä: {wind} –º/—Å–µ–∫\n")


                except:
                    bot.send_message(chat_id=message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É :(')

            elif message.text == '‚óÄ –ù–∞–∑–∞–¥':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item1 = types.KeyboardButton('üéá –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ')
                item2 = types.KeyboardButton('üîÆ –£–∑–Ω–∞–µ–º –ø–æ–≥–æ–¥—É')
                # item3 = types.KeyboardButton('üç© ITSM365')
                item4 = types.KeyboardButton('üå¨Ô∏è –ê–ª–∏—Å–∞')
                item5 = types.KeyboardButton('üî± –î—Ä—É–≥–æ–µ')

                markup.row(item1, item2)
                markup.row(item4, item5)

                bot.send_message(message.chat.id, '‚óÄ –ù–∞–∑–∞–¥', reply_markup=markup)


    else:
        bot.send_message(message.chat.id, message.text)


class ScheduleMessage():
    def try_send_schedule():
        while True:
            schedule.run_pending()
            time.sleep(1)

    def start_process():
        p1 = Process(target=ScheduleMessage.try_send_schedule, args=())
        p1.start()

#–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–∞–∫ –ø–æ—Ç–æ–º—É —á—Ç–æ –¥–≤–∞ –ø–æ—Ç–æ–∫–∞, —Å–∞–º –±–æ—Ç –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
if __name__ == '__main__':
    ScheduleMessage.start_process()
    try:
        bot.polling(none_stop=True)
    except:
        pass
