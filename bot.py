import random
from datetime import datetime
from threading import Thread

import prettytable as pt
import psycopg2
import requests
import telebot
from apscheduler.schedulers.background import BackgroundScheduler
from telebot import types
from telebot.types import KeyboardButton

import config

bot = telebot.TeleBot(config.TOKEN)

# –°–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–º—É –¥–æ—Å—Ç—É–ø–µ–Ω –±–æ—Ç
list_user = ['moskva_max', 'Sa_Mosk']


def approvedDate():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ —Å–µ–≥–æ–¥–Ω—è —É –∫–æ–≥–æ-–Ω–∏–±—É–¥—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ
    :return: –¢–µ–∫—Å—Ç
    """
    text = '–ü—É—Å—Ç–æ'
    con = psycopg2.connect(
        database=config.PG_DATABASE,
        user=config.PG_USER,
        password=config.PG_PASSWORD,
        host=config.PG_HOST,
        port=config.PG_PORT
    )
    cur = con.cursor()
    cur.execute('SELECT text, year, dm from public."Birthday"')
    rows = cur.fetchall()
    curDate = datetime.now().strftime("%d-%m")
    curYear = datetime.now().strftime("%Y")
    for row in rows:
        if row[2] == curDate:
            text = '–°–µ–≥–æ–¥–Ω—è ' + row[0] + ', ' + '—Ä–æ–¥–∏–ª—Å—è(-–ª–∞—Å—å) ' + row[1] + ', –ª–µ—Ç ' + (int(curYear) - int(row[1]))
        else:
            text = '–°–µ–≥–æ–¥–Ω—è, –Ω–µ—Ç –Ω–∏ —É –∫–æ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è!'

    con.close()
    return text


@bot.message_handler(commands=['start'])
def start_command(message):
    """
    –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    :return: –í–æ–∑–≤—Ä–∞—Ç –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    """
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('üéá –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ')
    item2 = types.KeyboardButton('üîÆ –£–∑–Ω–∞–µ–º –ø–æ–≥–æ–¥—É')
    item3 = types.KeyboardButton('üç© ITSM365')
    item4 = types.KeyboardButton('üî± –î—Ä—É–≥–æ–µ')

    markup.add(item1, item2, item3, item4)

    def run():
        if scheduler.state != 1:
            scheduler.add_job(bot.send_message, trigger='cron', hour='10', minute='00',
                              args=[message.chat.id, approvedDate()])
            scheduler.start()
            bot.send_message(message.chat.id, '–£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ üòé', reply_markup=markup)
        else:
            bot.send_message(message.chat.id, '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω üòã', reply_markup=markup)

    thread = Thread(target=run())
    thread.start()

    bot.send_message(message.chat.id,
                     '–ü—Ä–∏–≤–µ—Ç!.\n' +
                     '–£–º–µ—é –≤—Å—è–∫–æ–µ.\n' +
                     '–°–µ–π—á–∞—Å –Ω–∞–ø—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫, —Ç–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00 –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.\n',
                     reply_markup=markup
                     )


def toFixed(numObj, digits=0):
    """
    –£–¥–∞–ª—è–µ—Ç —Å–∏–º–≤–æ–ª—ã –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    :param numObj: –≤—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    :param digits: —Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π, –µ—Å–ª–∏ 0 —Ç–æ –∑–∞–ø—è—Ç–∞—è —É–±–∏—Ä–∞–µ—Ç—Å—è
    :return:
    """
    return f"{numObj:.{digits}f}"


scheduler = BackgroundScheduler({'apscheduler.timezone': 'Europe/Moscow'})


@bot.message_handler(content_types=['text'])
def bot_message(message):
    e = 0
    if message.chat.username in list_user:
        if message.chat.type == 'private':

            if message.text == 'üéá –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ':
                bot.send_message(message.chat.id, '–í–∞—à–µ —á–∏—Å–ª–æ: ' + str(random.randint(0, 100)))

            elif message.text == 'üîÆ –£–∑–Ω–∞–µ–º –ø–æ–≥–æ–¥—É':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item1 = types.KeyboardButton('üè§ –ú–æ—Å–∫–≤–∞')
                item2 = types.KeyboardButton('üö£ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥')
                back = types.KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')
                markup.add(item1, item2, back)

                bot.send_message(message.chat.id, 'üîÆ –£–∑–Ω–∞–µ–º –ø–æ–≥–æ–¥—É', reply_markup=markup)

            elif message.text == 'üç© ITSM365':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item1 = types.KeyboardButton('üçÄ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã')
                item2 = types.KeyboardButton('üì¶ –ó–∞—è–≤–æ–∫ —Å–µ–≥–æ–¥–Ω—è')
                item3 = types.KeyboardButton('üì¶ –°—Ç–∞—Ç. –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º')
                item4 = types.KeyboardButton('üì¶ –í–æ–π—Ç–∏ –ø–æ–¥ ...')
                item5 = types.KeyboardButton('üö™ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—è–≤–∫–∏')
                item6 = types.KeyboardButton('üì¶ –ï—â—ë –æ–¥–Ω–æ 4')
                back = types.KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')
                markup.add(item1, item2, item3, item4, item5, item6, back)

                bot.send_message(message.chat.id, 'üç© ITSM365', reply_markup=markup)

            elif message.text == 'üçÄ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã':
                try:
                    r = requests.get(f"{config.PATH}sd/services/rest/check-status")
                    data = r.text
                    time = toFixed(r.elapsed.total_seconds(), 2)

                    bot.send_message(message.chat.id,
                                     f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {data}\n" +
                                     f"–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {time} —Å–µ–∫")

                except:
                    bot.send_message(chat_id=message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É :(')

            elif message.text == 'üì¶ –ó–∞—è–≤–æ–∫ —Å–µ–≥–æ–¥–Ω—è':
                try:
                    url = f"{config.PATH}sd/services/rest/exec?accessKey={config.ACCESSKEY}"

                    files = [
                        ('script', ('countCall.groovy', open('Groovy Script/countCall.groovy', 'rb'),
                                    'application/octet-stream'))
                    ]
                    headers = config.headers

                    response = requests.request("POST", url, headers=headers, data={}, files=files)

                    data = response.text

                    bot.send_message(message.chat.id,
                                     f"{data}")
                except:
                    bot.send_message(chat_id=message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É :(')

            elif message.text == 'üì¶ –°—Ç–∞—Ç. –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º':

                try:
                    url = f"{config.PATH}sd/services/rest/exec?accessKey={config.ACCESSKEY}"

                    files = [
                        ('script', ('countCall.groovy', open('Groovy Script/tableStatisticForClient.groovy', 'rb'),
                                    'application/octet-stream'))
                    ]
                    headers = config.headers

                    response = requests.request("POST", url, headers=headers, data={}, files=files)

                    list = []
                    data = response.text
                    data = data.replace("]", "", 1)
                    data = data.replace("[", "", 1)

                    for i in range(0, 1):
                        list.extend(data.split(', '))

                    table = pt.PrettyTable(["–ù–∞–∑–≤–∞–Ω–∏–µ", "–ó–∞—è–≤–∫–∏", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏", "–†–µ–≥–ª. —Ä–∞–±–æ—Ç—ã"])
                    table.align['–ù–∞–∑–≤–∞–Ω–∏–µ'] = 'l'
                    table.align['–ó–∞—è–≤–∫–∏'] = 'r'
                    table.align['–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏'] = 'r'
                    table.align['–†–µ–≥–ª. —Ä–∞–±–æ—Ç—ã'] = 'r'

                    '''
                    –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥—è—â–∏–π —Ç–∞–±–ª–∏—Ü—ã –ø–æ–¥ —Ü–∏–∫–ª, –ø—Ä–æ–±–æ–≤–∞–ª –Ω–∏–∂–µ –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
                    data = []
                    for j in range(0, len(list), 4):
                        a1 = (f'{list[j]}', list[j+1], list[j+2], list[j+3])
                        data.append(a1)
                    '''

                    data = [
                        (f'{list[0]}', int(list[1]), int(list[2]), int(list[3])),
                        (f'{list[4]}', int(list[5]), int(list[6]), int(list[7])),
                        (f'{list[8]}', int(list[9]), int(list[10]), int(list[11])),
                        (f'{list[12]}', int(list[13]), int(list[14]), int(list[15])),
                        (f'{list[16]}', int(list[17]), int(list[18]), int(list[19])),
                        (f'{list[20]}', int(list[21]), int(list[22]), int(list[23])),
                        (f'{list[24]}', int(list[25]), int(list[26]), int(list[27])),
                        (f'{list[28]}', int(list[29]), int(list[30]), int(list[31])),
                        (f'{list[32]}', int(list[33]), int(list[34]), int(list[35])),
                        (f'{list[36]}', int(list[37]), int(list[38]), int(list[39])),
                        (f'{list[40]}', int(list[41]), int(list[42]), int(list[43])),
                        (f'{list[44]}', int(list[45]), int(list[46]), int(list[47])),
                        (f'{list[48]}', int(list[49]), int(list[50]), int(list[51])),
                    ]

                    for name, call, emp, regalement in data:
                        table.add_row([name, f'{call:.0f}', f'{emp:.0f}', f'{regalement:.0f}'])

                    bot.send_message(message.chat.id,
                                     f'<pre>{table}</pre>', parse_mode="HTML")
                except:
                    bot.send_message(chat_id=message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É :(')

            elif message.text == 'üì¶ –í–æ–π—Ç–∏ –ø–æ–¥ ...':
                try:
                    markup = types.ForceReply(selective=False)
                    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é, —Ç–∏–ø–∞ –ò–≤–∞–Ω–æ–≤", reply_markup=markup)

                    @bot.message_handler(content_types=['text'])
                    def message_input_step(message_user):
                        global user_text
                        user_text = message_user.text

                        if user_text != '':
                            with open('Groovy Script/loginForEmpl.groovy', 'r', encoding="utf-8") as f:
                                old_data = f.read()

                            new_data = old_data.replace('–ò–≤–∞–Ω–æ–≤', user_text)

                            with open('Groovy Script/loginForEmpl.groovy', 'w', encoding="utf-8") as f:
                                f.write(new_data)

                            url_ACCESSKEY = f"{config.PATH}sd/services/rest/exec?accessKey={config.ACCESSKEY}"

                            files = [
                                ('script', ('loginForEmpl.groovy', open('Groovy Script/loginForEmpl.groovy', 'rb'),
                                            'application/octet-stream'))
                            ]
                            headers = config.headers

                            responseNSD = requests.request("POST", url_ACCESSKEY, headers=headers, data={}, files=files)

                            dataResponse = responseNSD.text

                            markupKeybord = types.ReplyKeyboardMarkup(resize_keyboard=True)
                            item1Button = types.KeyboardButton('üçÄ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã')
                            item2Button = types.KeyboardButton('üì¶ –ó–∞—è–≤–æ–∫ —Å–µ–≥–æ–¥–Ω—è')
                            item3Button = types.KeyboardButton('üì¶ –°—Ç–∞—Ç. –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º')
                            item4Button = types.KeyboardButton('üì¶ –í–æ–π—Ç–∏ –ø–æ–¥ ...')
                            item5Button = types.KeyboardButton('üì¶ –ï—â—ë –æ–¥–Ω–æ 3')
                            item6Button = types.KeyboardButton('üì¶ –ï—â—ë –æ–¥–Ω–æ 4')
                            backButton: KeyboardButton = types.KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')
                            markupKeybord.add(item1Button, item2Button, item3Button, item4Button, item5Button,
                                              item6Button, backButton)

                            bot.send_message(message.chat.id, text=dataResponse, parse_mode="HTML",
                                             reply_markup=markupKeybord)

                            new_data2 = new_data.replace(user_text, '–ò–≤–∞–Ω–æ–≤')
                            with open('Groovy Script/loginForEmpl.groovy', 'w', encoding="utf-8") as f:
                                f.write(new_data2)

                    bot.register_next_step_handler(message,
                                                   message_input_step)
                    # –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ message_input_step
                except:
                    bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É :(')

            elif message.text == 'üö™ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—è–≤–∫–∏':
                try:
                    markup = types.ForceReply(selective=False)
                    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é, —Ç–∏–ø–∞ –ü–µ—Ç—Ä–æ–≤", reply_markup=markup);

                    @bot.message_handler(content_types=['text'])
                    def message_input_step(message_user):
                        global user_text
                        user_text = message_user.text

                        if user_text != '':
                            with open('Groovy Script/SClistEmpl.groovy', 'r', encoding="utf-8") as f:
                                old_data = f.read()

                            new_data = old_data.replace('–ò–≤–∞–Ω–æ–≤', user_text)

                            with open('Groovy Script/SClistEmpl.groovy', 'w', encoding="utf-8") as f:
                                f.write(new_data)

                            url_ACCESSKEY = f"{config.PATH}sd/services/rest/exec?accessKey={config.ACCESSKEY}"

                            files = [
                                ('script', ('SClistEmpl.groovy', open('Groovy Script/SClistEmpl.groovy', 'rb'),
                                            'application/octet-stream'))
                            ]
                            headers = config.headers

                            responseNSD = requests.request("POST", url_ACCESSKEY, headers=headers, data={}, files=files)

                            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ –±—ã–ª–æ
                            new_data2 = new_data.replace(user_text, '–ò–≤–∞–Ω–æ–≤')
                            with open('Groovy Script/SClistEmpl.groovy', 'w', encoding="utf-8") as f:
                                f.write(new_data2)

                            dataResponse = responseNSD.text.replace("[", "", 1)
                            dataResponse = dataResponse.replace("]", "", 1)

                            markupKeybord = types.ReplyKeyboardMarkup(resize_keyboard=True)
                            item1Button = types.KeyboardButton('üçÄ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã')
                            item2Button = types.KeyboardButton('üì¶ –ó–∞—è–≤–æ–∫ —Å–µ–≥–æ–¥–Ω—è')
                            item3Button = types.KeyboardButton('üì¶ –°—Ç–∞—Ç. –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º')
                            item4Button = types.KeyboardButton('üì¶ –í–æ–π—Ç–∏ –ø–æ–¥ ...')
                            item5Button = types.KeyboardButton('üö™ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—è–≤–∫–∏')
                            item6Button = types.KeyboardButton('üì¶ –ï—â—ë –æ–¥–Ω–æ 4')
                            backButton: KeyboardButton = types.KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')

                            markupKeybord.add(item1Button, item2Button, item3Button, item4Button, item5Button,
                                              item6Button, backButton)

                            if dataResponse != '':
                                list_empl = dataResponse.split('=')

                                for k in range(0, len(list_empl)):
                                    list_empl[k] = list_empl[k].replace('{', '')
                                    list_empl[k] = list_empl[k].replace('}', '')
                                    list_empl[k] = list_empl[k].replace('[', '')
                                    list_empl[k] = list_empl[k].replace(']', '')

                                list_call_title = list_empl[2].split(',')
                                list_call_UUID = list_empl[3].split(',')

                                # –§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                                InlineKeyboardMarkup = types.InlineKeyboardMarkup()

                                if list_call_title[0] != '':
                                    for j in range(0, len(list_call_title) - 1, 5):
                                        if (len(list_call_title) - j) > 5:
                                            button1 = types.InlineKeyboardButton(
                                                url=config.PATH + 'sd/operator/#uuid:' +
                                                    list_call_UUID[j], text=list_call_title[j])
                                            button2 = types.InlineKeyboardButton(
                                                url=config.PATH + 'sd/operator/#uuid:' +
                                                    list_call_UUID[j + 1],
                                                text=list_call_title[j + 1])
                                            button3 = types.InlineKeyboardButton(
                                                url=config.PATH + 'sd/operator/#uuid:' +
                                                    list_call_UUID[j + 2],
                                                text=list_call_title[j + 2])
                                            button4 = types.InlineKeyboardButton(
                                                url=config.PATH + 'sd/operator/#uuid:' +
                                                    list_call_UUID[j + 3],
                                                text=list_call_title[j + 3])
                                            button5 = types.InlineKeyboardButton(
                                                url=config.PATH + 'sd/operator/#uuid:' +
                                                    list_call_UUID[j + 4],
                                                text=list_call_title[j + 4])
                                            InlineKeyboardMarkup.row(button1, button2, button3, button4, button5)
                                        else:
                                            for l in range(0, len(list_call_title) - j):
                                                if len(list_call_title) - j == 1:
                                                    button1 = types.InlineKeyboardButton(
                                                        url=config.PATH + 'sd/operator/#uuid:' +
                                                            list_call_UUID[l], text=list_call_title[l])
                                                    InlineKeyboardMarkup.row(button1)
                                                elif len(list_call_title) - j == 2:
                                                    button1 = types.InlineKeyboardButton(
                                                        url=config.PATH + 'sd/operator/#uuid:' +
                                                            list_call_UUID[l], text=list_call_title[l])
                                                    button2 = types.InlineKeyboardButton(
                                                        url=config.PATH + 'sd/operator/#uuid:' +
                                                            list_call_UUID[l + 1], text=list_call_title[l + 1])
                                                    InlineKeyboardMarkup.row(button1, button2)
                                                elif len(list_call_title) - j == 3:
                                                    button1 = types.InlineKeyboardButton(
                                                        url=config.PATH + 'sd/operator/#uuid:' +
                                                            list_call_UUID[l], text=list_call_title[l])
                                                    button2 = types.InlineKeyboardButton(
                                                        url=config.PATH + 'sd/operator/#uuid:' +
                                                            list_call_UUID[l + 1], text=list_call_title[l + 1])
                                                    button3 = types.InlineKeyboardButton(
                                                        url=config.PATH + 'sd/operator/#uuid:' +
                                                            list_call_UUID[l + 2], text=list_call_title[l + 2])
                                                    InlineKeyboardMarkup.row(button1, button2, button3)
                                                elif len(list_call_title) - j == 4:
                                                    button1 = types.InlineKeyboardButton(
                                                        url=config.PATH + 'sd/operator/#uuid:' +
                                                            list_call_UUID[l], text=list_call_title[l])
                                                    button2 = types.InlineKeyboardButton(
                                                        url=config.PATH + 'sd/operator/#uuid:' +
                                                            list_call_UUID[l + 1], text=list_call_title[l + 1])
                                                    button3 = types.InlineKeyboardButton(
                                                        url=config.PATH + 'sd/operator/#uuid:' +
                                                            list_call_UUID[l + 2], text=list_call_title[l + 2])
                                                    button4 = types.InlineKeyboardButton(
                                                        url=config.PATH + 'sd/operator/#uuid:' +
                                                            list_call_UUID[l + 3], text=list_call_title[l + 3])
                                                    InlineKeyboardMarkup.row(button1, button2, button3, button4)

                                bot.send_message(message.chat.id, text='–ó–∞—è–≤–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: ' + list_empl[0],
                                                 parse_mode="HTML",
                                                 reply_markup=InlineKeyboardMarkup)

                                bot.send_message(message.chat.id, text='–ó–∞–∫–æ–Ω—á–∏–ª –≤—ã–≤–æ–¥ –∑–∞—è–≤–æ–∫!', parse_mode="HTML",
                                                 reply_markup=markupKeybord)
                            else:
                                bot.send_message(message.chat.id, text='–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!', parse_mode="HTML",
                                                 reply_markup=markupKeybord)

                    bot.register_next_step_handler(message,
                                                   message_input_step)

                    # –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ message_input_step
                except:
                    bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É :(')

            elif message.text == 'üî± –î—Ä—É–≥–æ–µ':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item1 = types.KeyboardButton('üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')
                item3 = types.KeyboardButton('üóø –°—Ç–∏–∫–µ—Ä')
                back = types.KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')
                markup.add(item1, item3, back)

                bot.send_message(message.chat.id, 'üî± –î—Ä—É–≥–æ–µ', reply_markup=markup)

            elif message.text == '‚óÄ –ù–∞–∑–∞–¥':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item1 = types.KeyboardButton('üéá –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ')
                item2 = types.KeyboardButton('üîÆ –£–∑–Ω–∞–µ–º –ø–æ–≥–æ–¥—É')
                item3 = types.KeyboardButton('üç© ITSM365')
                item4 = types.KeyboardButton('üî± –î—Ä—É–≥–æ–µ')

                markup.add(item1, item2, item3, item4)

                bot.send_message(message.chat.id,
                                 '‚óÄ –ù–∞–∑–∞–¥',
                                 reply_markup=markup
                                 )

            elif message.text == 'üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π':
                try:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    item2 = types.KeyboardButton('üìç –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞')
                    item3 = types.KeyboardButton('üóíÔ∏è –í—Å–µ –¥–∞—Ç—ã')
                    back = types.KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')
                    markup.add(item2, item3, back)

                    bot.send_message(message.chat.id, 'üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π', reply_markup=markup)

                except:
                    bot.send_message(chat_id=message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É :(')

            elif message.text == 'üìç –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞':
                try:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    item2 = types.KeyboardButton('üìç –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞')
                    item3 = types.KeyboardButton('üóíÔ∏è –í—Å–µ –¥–∞—Ç—ã')
                    back = types.KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')
                    markup.add(item2, item3, back)

                    def run():
                        if scheduler.state != 1:
                            scheduler.add_job(bot.send_message, trigger='cron', hour='10', minute='00',
                                              args=[message.chat.id, approvedDate()])
                            scheduler.start()
                            bot.send_message(message.chat.id, '–£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ üòé', reply_markup=markup)
                        else:
                            bot.send_message(message.chat.id, '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω üòã', reply_markup=markup)

                    thread = Thread(target=run())
                    thread.start()

                except:
                    bot.send_message(chat_id=message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É :(')

            elif message.text == 'üóíÔ∏è –í—Å–µ –¥–∞—Ç—ã':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item2 = types.KeyboardButton('üìç –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞')
                item3 = types.KeyboardButton('üóíÔ∏è –í—Å–µ –¥–∞—Ç—ã')
                back = types.KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')
                markup.add(item2, item3, back)

                try:
                    con = psycopg2.connect(
                        database=config.PG_DATABASE,
                        user=config.PG_USER,
                        password=config.PG_PASSWORD,
                        host=config.PG_HOST,
                        port=config.PG_PORT
                    )

                    cur = con.cursor()
                    cur.execute('SELECT * FROM public."Birthday"')
                    rows = cur.fetchall()

                    for row in rows:
                        bot.send_message(message.chat.id, parse_mode="HTML",
                                         text="–û–ø–∏—Å–∞–Ω–∏–µ: " + row[0] + "<pre>\n</pre> –ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è: " +
                                              row[1] + "<pre>\n</pre> –î–µ–Ω—å –∏ –º–µ—Å—è—Ü: " + row[2])

                    con.close()

                except:
                    bot.send_message(chat_id=message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É :(', reply_markup=markup)

            elif message.text == 'üóø –°—Ç–∏–∫–µ—Ä':
                try:
                    i = random.randint(1, 100)

                    con = psycopg2.connect(
                        database=config.PG_DATABASE,
                        user=config.PG_USER,
                        password=config.PG_PASSWORD,
                        host=config.PG_HOST,
                        port=config.PG_PORT
                    )

                    cur = con.cursor()

                    cur.execute('SELECT * FROM public."Stickers" WHERE id = ' + str(i))

                    rows = cur.fetchall()

                    for row in rows:
                        bot.send_sticker(message.chat.id, row[1])

                    con.close()

                except:
                    bot.send_message(chat_id=message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É :(')

            elif message.text == 'üè§ –ú–æ—Å–∫–≤–∞':
                try:
                    r = requests.get(
                        f"http://api.openweathermap.org/data/2.5/weather?q=moscow&appid="
                        f"{config.WEATHER_TOKEN}&units=metric"
                    )
                    data = r.json()

                    cur_weat = data["main"]["temp"]
                    humidity = data["main"]["humidity"]
                    pressure = data["main"]["pressure"]
                    wind = data["wind"]["speed"]

                    bot.send_message(message.chat.id,
                                     f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weat}C¬∞\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                                     f"–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Ç.\n–í–µ—Ç–µ—Ä: {wind} –º/—Å–µ–∫\n")


                except:
                    bot.send_message(chat_id=message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É :(')

            elif message.text == 'üö£ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥':
                try:
                    r = requests.get(
                        f"http://api.openweathermap.org/data/2.5/weather?q=Saint%20Petersburg&appid="
                        f"{config.WEATHER_TOKEN}&units=metric"
                    )
                    data = r.json()

                    cur_weat = data["main"]["temp"]
                    humidity = data["main"]["humidity"]
                    pressure = data["main"]["pressure"]
                    wind = data["wind"]["speed"]

                    bot.send_message(message.chat.id,
                                     f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weat}C¬∞\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                                     f"–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Ç.\n–í–µ—Ç–µ—Ä: {wind} –º/—Å–µ–∫\n")


                except:
                    bot.send_message(chat_id=message.chat.id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É :(')

    else:
        bot.send_message(message.chat.id, message.text)


bot.polling(none_stop=True)
